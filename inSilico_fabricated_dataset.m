function inSilico_fabricated_dataset(save_stem,model,nb_embryos,nb_bootstrap,np,tmin,tau,tau1,tau2,prop,tau1_,tau2_,tau3_,prop1_,prop2_,...
    prop4_1,prop4_2,prop4_3,tau4_1,tau4_2,tau4_3,tau4_4,tauS,powerS,algo_fitting,use_smoothing_fit,compute_error)

%% explanations of the script

% script enabling to generate fabricated datasets composed of X embryos of given dynamics
% Then, the simulated embryos (duration distributions) are analysed using the DiLiPop stastistical analysis.
% Results are saved in txt file 'parameters_inSilicoTracksDurations.txt' and in mat file 'fitting_results-BayesianInference_sum_mle-' 
% to compare assigned values to recovered values and to test wether best model is correctly found

% Several plots are also generated to display :
% - the duration distribution with the different fits;
% - the residuals of the fit
% - the duration distribution with the best model fitting
% - the distribution of the recovered parameters over the different bootstraps

global pathMainDirectory

%% input args

% 1st: save_stem: path where to save data and plots generated by the analysis
% 2nd: model used yo simulate the duration distribution dataset: mono exponential, double-expo, triple-expo, quado-expo or monoexpo stretched
% 3rd: number of embryos in the fabricated dataset
% 4th: number of times the simulation is repeated
% 5th: number of tracks that composed a simulated embryo (sample size)
% 6th: minimal duration of a track
% 7th til 24th: parameters of the model used to simulate the duration distribution dataset. empty vector for parameters not assigned
    % tau: lifetime of the monoexponential model
    % tau1,tau2,prop: lifetimes and proportion of the double-exponential model
    % tau1_,tau2_,tau3_,prop1_,prop2_: lifetimes and proportion of the triple-exponential model
    % prop4_1,prop4_2,prop4_3,tau4_1,tau4_2,tau4_3,tau4_4 : lifetimes and proportion of the quadro-exponential model
    % tauS, powerS: parameters of the stretched exponential
% 25th: algorythm used to fit dhe duration distribution
% 26th: possibility to fit not the raw distribution, but a smoothed distribution
% 27th: possibility to compute the error associtaed to each model parameter


if nargin <1
    
    p = pwd;
    
    [save_stem_bkp, p] = uiputfile('*','Please provide a path and stem name for saving figures',fullfile(p,['inSilico_fabricated_dataset_']));
    
    p0 = fullfile(p,[save_stem_bkp, date]);
    p1 = unique_name(p0,'dir');
    if ~exist(p1,'dir')
        mkdir(p1);
    end
    p = p1;
    pathMainDirectory = p;
    save_stem = fullfile(p,save_stem_bkp);
    if ~isempty(p)
        cd(p);
    end
    
end

errors_PathDirectory = fullfile(pathMainDirectory,'errors_estimates');
if ~exist(errors_PathDirectory,'dir')
    mkdir(errors_PathDirectory);
end

if nargin <2
    
    choiceModel = input_perso(['Enter choice for model (\n 1- MonoExpo, \n 2- DoubleExpo, \n 3- MonoExpo stretched, \n 4- TripleExpo  \n 5- QuadroExpo): '], 2);
    
    switch choiceModel
        case 1
            model = 'MonoExpo';
        case 2
            model = 'DoubleExpo';
        case 3
            model = 'MonoExpo_stretched';
        case 4
            model = 'TripleExpo';
        case 5
            model = 'QuadroExpo';
        otherwise
            disp('bad choice');
    end
    
end

if nargin <3
    nb_embryos = input_perso(['How many embryos do you wish to study? '],8);
end

if nargin <4
    nb_bootstrap = input_perso(['How many boostrap do you wish to perform? '],10);
end

model_bkp = model;
model_init = {model};

if nargin < 5
    np = input_perso(['Size of the sample? '],5000);
end

if nargin < 6
    tmin = input_perso(['Minimum for the contact duration? '],0.2);
end

if nargin < 7
    
    % mono
    tau = [];
    % double
    tau1 = [];
    tau2 = [];
    prop = [];
    % triple
    tau1_ = [];
    tau2_ = [];
    tau3_ = [];
    prop1_ = [];
    prop2_ = [];
    % quadro
    tau4_1 = [];
    tau4_2 = [];
    tau4_3 = [];
    tau4_4 = [];
    prop4_1 = [];
    prop4_2 = [];
    prop4_3 = [];
    % stretched exponential
    tauS = [];  
    powerS = [];  
    
    if strcmp(model_bkp,'MonoExpo')
        tau = input_perso(['Give the lifetime? '],1);
    elseif strcmp(model_bkp,'DoubleExpo')
        tau1 = input_perso(['Give the 1st lifetime: '],0.5);
        tau2 = input_perso(['Give the 2nd lifetime: '],2);
        prop = input_perso(['Proportion in 1st family? '],0.6);
    elseif strcmp(model_bkp,'TripleExpo')
        tau1_ = input_perso(['Give the 1st lifetime: '],0.4);
        tau2_ = input_perso(['Give the 2nd lifetime: '],1.5);
        tau3_ = input_perso(['Give the 3rd lifetime: '],4);
        prop1_ = input_perso(['Proportion in 1st family? '],0.55);
        prop2_ = input_perso(['Proportion in 2nd family? '],0.4);
    elseif strcmp(model_bkp,'QuadroExpo')
        tau4_1 = input_perso(['Give the 1st lifetime: '],0.12);
        tau4_2 = input_perso(['Give the 2nd lifetime: '],0.5);
        tau4_3 = input_perso(['Give the 3rd lifetime: '],1.5);
        tau4_4 = input_perso(['Give the 4th lifetime: '],4);
        prop4_1 = input_perso(['Proportion in 1st family? '],0.2);
        prop4_2 = input_perso(['Proportion in 2nd family? '],0.25);
        prop4_3 = input_perso(['Proportion in 3rd family? '],0.35);
    elseif strcmp(model_bkp,'MonoExpo_stretched')
        tauS = input_perso(['Give the lifetime? '],0.1);
        powerS = input_perso(['Give the power? '],2.2);        
    end
end

if nargin < 25
    algo_fitting = input_perso(['Which algo to fit duration distribution? 1 = fmincon, 2 = fminsearch,  3 = fminunc, 4 = patternsearch '],1);
    if algo_fitting == 1
        save_stem_bkp = 'inSilico_fabricated_dataset_fmincon_';
    elseif algo_fitting == 2
        save_stem_bkp = 'inSilico_fabricated_dataset_fminsearch_';
    elseif algo_fitting == 3
        save_stem_bkp = 'inSilico_fabricated_dataset_fminunc_';
    elseif algo_fitting == 4
        save_stem_bkp = 'inSilico_fabricated_dataset_patternsearch_';
    end
end

if nargin < 26
    use_smoothing_fit = input_perso(['Do you wish to smooth the duration distribution before fitting?'],0);
    if use_smoothing_fit == 1
        binCount_smoothW_size = 5;
    else
        binCount_smoothW_size = [];
    end
end

if nargin < 27
    compute_error = input_perso(['Do you wish to compute error via bootstraping? yes = 1, no = 0'],0);
end


%% allocate variables

frequency = 10; %Hz
if strcmp(model_bkp,'QuadroExpo') && tau4_4 > 5
    tmax = 15; % Maximal duration of a track in sec
else
    tmax = 10;
end
match_nb = 0;

%mono expo results
sample_tau = [];
sample_tau_se = [];

% double expo results
sample_tau1 = [];
sample_tau1_se = [];
sample_tau2 = [];
sample_tau2_se = [];
sample_prop = [];
sample_prop_se = [];

% triple expo results
sample_tau1_ = [];
sample_tau1_se_ = [];
sample_tau2_ = [];
sample_tau2_se_ = [];
sample_tau3_ = [];
sample_tau3_se_ = [];
sample_prop1_ = [];
sample_prop1_se_ = [];
sample_prop2_ = [];
sample_prop2_se_ = [];

% quadro expo results
sample_tau4_1 = [];
sample_tau4_1_se = [];
sample_tau4_2 = [];
sample_tau4_2_se = [];
sample_tau4_3 = [];
sample_tau4_3_se = [];
sample_tau4_4 = [];
sample_tau4_4_se = [];
sample_prop4_1 = [];
sample_prop4_1_se = [];
sample_prop4_2 = [];
sample_prop4_2_se = [];
sample_prop4_3 = [];
sample_prop4_3_se = [];

% stretch expo results
sample_tauS = [];
sample_powerS = [];


%% create in silico distribution

for k = 1 : nb_bootstrap
    
    extension2 = ['bootstrap_' num2str(k) '_'];
    save_stem2 = strcat(save_stem_bkp,extension2);
    save_stem2 = fullfile(pathMainDirectory,save_stem2);
    
    save_stem_error = strcat(save_stem_bkp,extension2);
    save_stem_error = fullfile(errors_PathDirectory,save_stem_error);
    
    
    for iEmbryo = 1 : nb_embryos
        
        extension = ['embryo' num2str(iEmbryo)];
        
        
        %% Construct datasets
        
        [ data,bincounts,binranges ] = to_generate_inSilico_durationSet...
            ( model_init,np,frequency,tmin,tmax,tau,prop,tau1,tau2,[],[],[],prop1_,prop2_,tau1_,tau2_,tau3_,[],[],...
            [],[],[],[],[],[],[],prop4_1,prop4_2,prop4_3,tau4_1,tau4_2,tau4_3,tau4_4,tauS,powerS);
        
        input_simulation.(extension).data = data;
        
    end
    
    
    %% fitting using fmincon or other functions (fminsearch, fminunc, pattern search) to get models parameters    
    
    if ~isempty(find(ismember(model_init,'QuadroExpo'),1))
        models = {'MonoExpo','DoubleExpo','TripleExpo','QuadroExpo'};
    else
        if ~isempty(find(ismember(model_init,'TripleExpo'),1)) || ~isempty(find(ismember(model_init,'DoubleExpo'),1)) || ~isempty(find(ismember(model_init,'MonoExpo'),1))
            models = {'MonoExpo','DoubleExpo','TripleExpo'};
        else
            if ~isempty(find(ismember(model_init,'MonoExpo_stretched'),1))
                models = {'MonoExpo','DoubleExpo','TripleExpo','MonoExpo_stretched'};
            end
        end
    end
    
    if algo_fitting == 1 % fmincon
        [ input_simulation,fitting_results] = to_calculate_parameters_using_fmincon_sum_mle...
            ( input_simulation,models,nb_embryos,1,NaN,NaN );
    elseif algo_fitting == 2 % fminsearch
        [ input_simulation,fitting_results] = to_calculate_parameters_using_fminsearch_sum_mle...
            ( input_simulation,models,nb_embryos,1,NaN,NaN );
    elseif algo_fitting == 3 % fminunc
        [ input_simulation,fitting_results] = to_calculate_parameters_using_fminunc_sum_mle...
            ( input_simulation,models,nb_embryos,1,NaN,NaN );
    elseif algo_fitting == 4 % pattern search
        [ input_simulation,fitting_results] = to_calculate_parameters_using_patternsearch_sum_mle...
            ( input_simulation,models,nb_embryos,1,NaN,NaN );
    end
    
    
    %% to find best model
    
    [ model_choice,best_model ] = to_find_best_model_sum_mle( input_simulation,fitting_results,nb_embryos,models );
    
    
    %% to plots experimental data with all models
    
    if strcmp(best_model,model_bkp) == 1
        match_nb = match_nb +1;
    end
    
    to_plot_data_withAllFits_sum_mle( input_simulation,fitting_results,models,best_model,nb_embryos,'','',save_stem2,2 );
    
    
    %% to plots residues of teh different models
    
    to_plot_residuals_sum_mle( input_simulation,fitting_results,nb_embryos,models,best_model,'','',save_stem2 );
    
    
    %% to evaluate the errors on the fitting parameters
    
    if compute_error == 1
        nbBootstrap = 100;
        if ~strcmp(best_model,'MonoExpo_stretched')
            [ fitting_results ] = to_calculate_errors_parameters_inSilicoSimulation_withPlots...
                ( fitting_results,best_model,'','',nb_embryos,save_stem_error,tmin,NaN,NaN,0,algo_fitting,nbBootstrap );
        end
    end
    
    
    %% plot the fit of the best model with the raw data of each embryo
    
    % y log scale
    if compute_error == 1
        to_plot_data_withBestFit_sum_mle( input_simulation,fitting_results,best_model,nb_embryos,'','',save_stem2,2 );
    else
        to_plot_data_withBestFit_sum_mle_noError( input_simulation,fitting_results,best_model,nb_embryos,'','',save_stem2,2 );
    end
    
    
    %% save structure with results incorporated
    
    name = strcat('fitting_results-BayesianInference_sum_mle-', extension, '.mat');
    save([save_stem2 name], 'fitting_results');
    
    
    if strcmp(best_model,'MonoExpo')
        sample_tau = [[sample_tau] fitting_results.MonoExpo.T];
        if compute_error == 1
            sample_tau_se = [[sample_tau_se] fitting_results.MonoExpo.T_se ];
        end
    elseif strcmp(best_model,'DoubleExpo')
        sample_tau1 = [[sample_tau1] fitting_results.DoubleExpo.T1 ];
        if compute_error == 1
            sample_tau1_se = [[sample_tau1_se] fitting_results.DoubleExpo.T1_se ];
        end
        sample_tau2 = [[sample_tau2] fitting_results.DoubleExpo.T2 ];
        if compute_error == 1
            sample_tau2_se = [[sample_tau2_se] fitting_results.DoubleExpo.T2_se ];
        end
        sample_prop = [[sample_prop] fitting_results.DoubleExpo.P1 ];
        if compute_error == 1
            sample_prop_se = [[sample_prop_se] fitting_results.DoubleExpo.P1_se ];
        end
    elseif strcmp(best_model,'TripleExpo')
        sample_tau1_ = [[sample_tau1_] fitting_results.TripleExpo.TT1 ];
        if compute_error == 1
            sample_tau1_se_ = [[sample_tau1_se_] fitting_results.TripleExpo.TT1_se ];
        end
        sample_tau2_ = [[sample_tau2_] fitting_results.TripleExpo.TT2 ];
        if compute_error == 1
            sample_tau2_se_ = [[sample_tau2_se_] fitting_results.TripleExpo.TT2_se ];
        end
        sample_tau3_ = [[sample_tau3_] fitting_results.TripleExpo.TT3 ];
        if compute_error == 1
            sample_tau3_se_ = [[sample_tau3_se_] fitting_results.TripleExpo.TT3_se ];
        end
        sample_prop1_ = [[sample_prop1_] fitting_results.TripleExpo.PP1 ];
        if compute_error == 1
            sample_prop1_se_ = [[sample_prop1_se_] fitting_results.TripleExpo.PP1_se ];
        end
        sample_prop2_ = [[sample_prop2_] fitting_results.TripleExpo.PP2 ];
        if compute_error == 1
            sample_prop2_se_ = [[sample_prop2_se_] fitting_results.TripleExpo.PP2_se ];
        end
    elseif strcmp(best_model,'QuadroExpo')
        sample_tau4_1 = [[sample_tau4_1] fitting_results.QuadroExpo.TTT1 ];
        if compute_error == 1
            sample_tau4_1_se = [[sample_tau4_1_se] fitting_results.QuadroExpo.TTT1_se ];
        end
        sample_tau4_2 = [[sample_tau4_2] fitting_results.QuadroExpo.TTT2 ];
        if compute_error == 1
            sample_tau4_2_se = [[sample_tau4_2_se] fitting_results.QuadroExpo.TTT2_se ];
        end
        sample_tau4_3 = [[sample_tau4_3] fitting_results.QuadroExpo.TTT3 ];
        if compute_error == 1
            sample_tau4_3_se = [[sample_tau4_3_se] fitting_results.QuadroExpo.TTT3_se ];
        end
        sample_tau4_4 = [[sample_tau4_4] fitting_results.QuadroExpo.TTT4 ];
        if compute_error == 1
            sample_tau4_4_se = [[sample_tau4_4_se] fitting_results.QuadroExpo.TTT4_se ];
        end
        sample_prop4_1 = [[sample_prop4_1] fitting_results.QuadroExpo.PPP1 ];
        if compute_error == 1
            sample_prop4_1_se = [[sample_prop4_1_se] fitting_results.QuadroExpo.PPP1_se ];
        end
        sample_prop4_2 = [[sample_prop4_2] fitting_results.QuadroExpo.PPP2 ];
        if compute_error == 1
            sample_prop4_2_se = [[sample_prop4_2_se] fitting_results.QuadroExpo.PPP_se ];
        end
        sample_prop4_3 = [[sample_prop4_2] fitting_results.QuadroExpo.PPP3 ];
        if compute_error == 1
            sample_prop4_3_se = [[sample_prop4_2_se] fitting_results.QuadroExpo.PPP3_se ];
        end
    elseif strcmp(best_model,'MonoExpo_stretched')
        sample_tauS = [[sample_tauS] fitting_results.MonoExpo_stretched.Ts];
        sample_powerS = [[sample_powerS] fitting_results.MonoExpo_stretched.power];
    end
    
    all_results.(extension) = fitting_results;
    clear fitting_results
    
end

%% save structure (mat file) of the fitting performed on the simulated duration distributions

name = strcat('fitting_results-BayesianInference_mle.mat');
save([save_stem name], 'all_results');
clear all_results



%% plot the variability in the recovered parameter values over the different bootstraps.

if nb_bootstrap ~= 1
    
    % mono
    if ~isempty(sample_tau)
        mean_tau = mean(sample_tau);
        std_tau = std(sample_tau);
        
        figure
        if compute_error == 1
            errorbar(sample_tau,sample_tau_se,'o');
        else
            plot(sample_tau,'o');
        end
        if strcmp(model_bkp,'MonoExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).*tau;
            plot(cst_raw,':r');
        end
        string = ['residency time = ' num2str(round2(mean_tau,1e-2)) ' +/- '  num2str(round2(std_tau,1e-2))  'sec. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Residency Time in sec');
        title(['Variability of residency time for monoexponential model' ]);
        namePlot = strcat('variability_tau.fig');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_tau.tif');
        saveas(gcf,[save_stem namePlot]);
    end
    
    % double
    if ~isempty(sample_tau1)
        mean_tau1 = mean(sample_tau1);
        std_tau1 = std(sample_tau1);
        mean_tau2 = mean(sample_tau2);
        std_tau2 = std(sample_tau2);
        mean_prop = mean(sample_prop);
        std_prop = std(sample_prop);
        
        figure
        if compute_error == 1
            errorbar(sample_tau1,sample_tau1_se,'o');
        else
            plot(sample_tau1,'o');
        end
        if strcmp(model_bkp,'DoubleExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).*tau1;
            plot(cst_raw,':r');
        end
        string = ['residency time = ' num2str(round2(mean_tau1,1e-2)) ' +/- '  num2str(round2(std_tau1,1e-2))  'sec. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Residency Time in sec');
        title(['Variability of short residency time for double exponential model' ]);
        namePlot = strcat('variability_tau1.tif');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_tau1.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        if compute_error == 1
            errorbar(sample_tau2,sample_tau2_se,'o');
        else
            plot(sample_tau2,'o');
        end
        if strcmp(model_bkp,'DoubleExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).*tau2;
            plot(cst_raw,':r');
        end
        string = ['residency time = ' num2str(round2(mean_tau2,1e-2)) ' +/- '  num2str(round2(std_tau2,1e-2))  'sec. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Residency Time in sec');
        title(['Variability of long residency time for double exponential model' ]);
        namePlot = strcat('variability_tau2.tif');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_tau2.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        if compute_error == 1
            errorbar(sample_prop,sample_prop_se,'o');
        else
            plot(sample_prop,'o');
        end
        if strcmp(model_bkp,'DoubleExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).*prop;
            plot(cst_raw,':r');
        end
        string = ['percent1 = ' num2str(round2(mean_prop*100,1e-2)) ' +/- '  num2str(round2(std_prop*100,1e-2))  '%. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Proportion');
        title(['Variability of percentage for double exponential model' ]);
        namePlot = strcat('variability_prop.tif');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_prop.fig');
        saveas(gcf,[save_stem namePlot]);
    end
    
    
    % triple
    if ~isempty(sample_tau1_)
        mean_tau1_ = mean(sample_tau1_);
        std_tau1_ = std(sample_tau1_);
        mean_tau2_ = mean(sample_tau2_);
        std_tau2_ = std(sample_tau2_);
        mean_tau3_ = mean(sample_tau3_);
        std_tau3_ = std(sample_tau3_);
        mean_prop1_ = mean(sample_prop1_);
        std_prop1_ = std(sample_prop1_);
        mean_prop2_ = mean(sample_prop2_);
        std_prop2_ = std(sample_prop2_);
        
        figure
        if compute_error == 1
            errorbar(sample_tau1_,sample_tau1_se_,'o');
        else
            plot(sample_tau1_,'o');
        end
        if strcmp(model_bkp,'TripleExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).*tau3_;
            plot(cst_raw,':r');
        end
        string = ['residency time = ' num2str(round2(mean_tau1_,1e-2)) ' +/- '  num2str(round2(std_tau1_,1e-2))  'sec. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Residency Time in sec');
        title(['Variability of long residency time for triple exponential model' ]);
        namePlot = strcat('variability_tau1_.tif');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_tau1_.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        if compute_error == 1
            errorbar(sample_tau2_,sample_tau2_se_,'o');
        else
            plot(sample_tau2_,'o');
        end
        if strcmp(model_bkp,'TripleExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).*tau2_;
            plot(cst_raw,':r');
        end
        string = ['residency time = ' num2str(round2(mean_tau2_,1e-2)) ' +/- '  num2str(round2(std_tau2_,1e-2))  'sec. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Residency Time in sec');
        title(['Variability of short residency time for triple exponential model' ]);
        namePlot = strcat('variability_tau2_.tif');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_tau2_.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        if compute_error == 1
            errorbar(sample_tau3_,sample_tau3_se_,'o');
        else
            plot(sample_tau3_,'o');
        end
        if strcmp(model_bkp,'TripleExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).*tau1_;
            plot(cst_raw,':r');
        end
        string = ['residency time = ' num2str(round2(mean_tau3_,1e-2)) ' +/- '  num2str(round2(std_tau3_,1e-2))  'sec. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Residency Time in sec');
        title(['Variability of very short residency time for triple exponential model' ]);
        namePlot = strcat('variability_tau3_.tif');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_tau3_.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        if compute_error == 1
            errorbar(sample_prop1_,sample_prop1_se_,'o');
        else
            plot(sample_prop1_,'o');
        end
        if strcmp(model_bkp,'TripleExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).* (1-prop1_-prop2_);
            plot(cst_raw,':r');
        end
        string = ['percent1 = ' num2str(round2(mean_prop1_*100,1e-2)) ' +/- '  num2str(round2(std_prop1_*100,1e-2))  '%. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Proportion');
        title(['Variability of percentage of very long lifetime population for triple exponential model' ]);
        namePlot = strcat('variability_prop1_.tif');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_prop1_.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        if compute_error == 1
            errorbar(sample_prop2_,sample_prop2_se_,'o');
        else
            plot(sample_prop2_,'o');
        end
        if strcmp(model_bkp,'TripleExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).*prop2_;
            plot(cst_raw,':r');
        end
        string = ['percent1 = ' num2str(round2(mean_prop2_*100,1e-2)) ' +/- '  num2str(round2(std_prop2_*100,1e-2))  '%. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Proportion');
        title(['Variability of percentage of short lifetime population for triple exponential model' ]);
        namePlot = strcat('variability_prop2_.tif');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_prop2_.fig');
        saveas(gcf,[save_stem namePlot]);
    end
    
    
    % quadro
    if ~isempty(sample_tau4_1)
        mean_tau4_1 = mean(sample_tau4_1);
        std_tau4_1 = std(sample_tau4_1);
        mean_tau4_2 = mean(sample_tau4_2);
        std_tau4_2 = std(sample_tau4_2);
        mean_tau4_3 = mean(sample_tau4_3);
        std_tau4_3 = std(sample_tau4_3);
        mean_tau4_4 = mean(sample_tau4_4);
        std_tau4_4 = std(sample_tau4_4);
        mean_prop4_1 = mean(sample_prop4_1);
        std_prop4_1 = std(sample_prop4_1);
        mean_prop4_2 = mean(sample_prop4_2);
        std_prop4_2 = std(sample_prop4_2);
        mean_prop4_3 = mean(sample_prop4_3);
        std_prop4_3 = std(sample_prop4_3);
        
        figure
        if compute_error == 1
            errorbar(sample_tau4_1,sample_tau4_1_se,'o');
        else
            plot(sample_tau4_1,'o');
        end
        if strcmp(model_bkp,'QuadroExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).*tau4_4;
            plot(cst_raw,':r');
        end
        string = ['residency time = ' num2str(round2(mean_tau4_1,1e-2)) ' +/- '  num2str(round2(std_tau4_1,1e-2))  'sec. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Residency Time in sec');
        title(['Variability of long residency time for quadro exponential model' ]);
        namePlot = strcat('variability_tau4_1_.tif');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_tau4_1_.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        if compute_error == 1
            errorbar(sample_tau4_2,sample_tau4_2_se,'o');
        else
            plot(sample_tau4_2,'o');
        end
        if strcmp(model_bkp,'QuadroExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).*tau4_2;
            plot(cst_raw,':r');
        end
        string = ['residency time = ' num2str(round2(mean_tau4_2,1e-2)) ' +/- '  num2str(round2(std_tau4_2,1e-2))  'sec. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Residency Time in sec');
        title(['Variability of short residency time for quadro exponential model' ]);
        namePlot = strcat('variability_tau4_2_.tif');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_tau4_2_.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        if compute_error == 1
            errorbar(sample_tau4_3,sample_tau4_3_se,'o');
        else
            plot(sample_tau4_3,'o');
        end
        if strcmp(model_bkp,'QuadroExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).*tau4_3;
            plot(cst_raw,':r');
        end
        string = ['residency time = ' num2str(round2(mean_tau4_3,1e-2)) ' +/- '  num2str(round2(std_tau4_3,1e-2))  'sec. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Residency Time in sec');
        title(['Variability of very short residency time for quadro exponential model' ]);
        namePlot = strcat('variability_tau4_3_.tif');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_tau4_3_.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        if compute_error == 1
            errorbar(sample_tau4_4,sample_tau4_4_se,'o');
        else
            plot(sample_tau4_4,'o');
        end
        if strcmp(model_bkp,'QuadroExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).*tau4_1;
            plot(cst_raw,':r');
        end
        string = ['residency time = ' num2str(round2(mean_tau4_4,1e-2)) ' +/- '  num2str(round2(std_tau4_4,1e-2))  'sec. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Residency Time in sec');
        title(['Variability of very short residency time for quadro exponential model' ]);
        namePlot = strcat('variability_tau4_4_.tif');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_tau4_4_.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        if compute_error == 1
            errorbar(sample_prop4_1,sample_prop4_1_se,'o');
        else
            plot(sample_prop4_1,'o');
        end
        if strcmp(model_bkp,'QuadroExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).* (1-prop4_1-prop4_2-prop4_3);
            plot(cst_raw,':r');
        end
        string = ['percent1 = ' num2str(round2(mean_prop4_1*100,1e-2)) ' +/- '  num2str(round2(std_prop4_1*100,1e-2))  '%. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Proportion');
        title(['Variability of percentage of very long lifetime population for quadro exponential model' ]);
        namePlot = strcat('variability_prop4_1_.tif');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_prop4_1_.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        if compute_error == 1
            errorbar(sample_prop4_2,sample_prop4_2_se,'o');
        else
            plot(sample_prop4_2,'o');
        end
        if strcmp(model_bkp,'QuadroExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).*prop4_2;
            plot(cst_raw,':r');
        end
        string = ['percent1 = ' num2str(round2(mean_prop4_2*100,1e-2)) ' +/- '  num2str(round2(std_prop4_2*100,1e-2))  '%. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Proportion');
        title(['Variability of percentage of short lifetime population for quadro exponential model' ]);
        namePlot = strcat('variability_prop4_2_.tif');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_prop4_2_.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        if compute_error == 1
            errorbar(sample_prop4_3,sample_prop4_3_se,'o');
        else
            plot(sample_prop4_3,'o');
        end
        if strcmp(model_bkp,'QuadroExpo')
            hold all
            cst_raw = ones(nb_bootstrap,1).*prop4_3;
            plot(cst_raw,':r');
        end
        string = ['percent1 = ' num2str(round2(mean_prop4_3*100,1e-2)) ' +/- '  num2str(round2(std_prop4_3*100,1e-2))  '%. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Proportion');
        title(['Variability of percentage of short lifetime population for quadro exponential model' ]);
        namePlot = strcat('variability_prop4_3_.tif');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_prop4_3_.fig');
        saveas(gcf,[save_stem namePlot]);
        
    end
   % stretched expo
    if ~isempty(sample_tauS)
        mean_tauS = mean(sample_tauS);
        std_tauS = std(sample_tauS);
        
        figure
        plot(sample_tauS,'o');
        if strcmp(model_bkp,'MonoExpo_stretched')
            hold all
            cst_raw = ones(nb_bootstrap,1).*tauS;
            plot(cst_raw,':r');
        end
        string = ['residency time = ' num2str(round2(mean_tauS,1e-2)) ' +/- '  num2str(round2(std_tauS,1e-2))  'sec. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Residency Time in sec');
        title(['Variability of residency time for stretched exponential model' ]);
        namePlot = strcat('variability_tauS.fig');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_tauS.tif');
        saveas(gcf,[save_stem namePlot]);
        
        mean_powerS = mean(sample_powerS);
        std_powerS = std(sample_powerS);
        
        figure
        plot(sample_powerS,'o');
        if strcmp(model_bkp,'MonoExpo_stretched')
            hold all
            cst_raw = ones(nb_bootstrap,1).*powerS;
            plot(cst_raw,':r');
        end
        string = ['residency time = ' num2str(round2(mean_powerS,1e-2)) ' +/- '  num2str(round2(std_powerS,1e-2))  'sec. '];
        text(25,50,string,'Units','pixels')
        xlabel('simulation index');
        ylabel('Power (a.u.)');
        title(['Variability of power for stretched exponential model' ]);
        namePlot = strcat('variability_powerS.fig');
        saveas(gcf,[save_stem namePlot]);
        namePlot = strcat('variability_powerS.tif');
        saveas(gcf,[save_stem namePlot]);
        
    end    
    
end


%% save parameters of inSilico data (assigned + recovered) in text file

name_fid = [save_stem 'parameters_inSilicoTracksDurations.txt'];
fid = fopen(name_fid ,'wt');

fprintf(fid,'Model chosen: \t');
fprintf(fid,'%s ', model_bkp );
fprintf(fid,'\n');

fprintf(fid,'Minimal duration for the distribution: \t');
fprintf(fid,'%.2f ', tmin );
fprintf(fid,'\n');

fprintf(fid,'Sample size: \t');
fprintf(fid,'%.2f ', np );
fprintf(fid,'\n');

fprintf(fid,'Nb of virtual embryos: \t');
fprintf(fid,'%.2f ', nb_embryos );
fprintf(fid,'\n');

fprintf(fid,'Boostrap number: \t');
fprintf(fid,'%.2f ', nb_bootstrap );
fprintf(fid,'\n');

fprintf(fid,'Smoothing before fitting: \t');
fprintf(fid,'%.2f ', use_smoothing_fit );
fprintf(fid,'\n');
if use_smoothing_fit == 1
    fprintf(fid,'Window size set to: \t');
    fprintf(fid,'%.2f ', binCount_smoothW_size );
    fprintf(fid,'\n');
end

fprintf(fid,'Algo used (1 = fmincon, 2 = fminsearch, 3 = fminunc, 4 = patternsearch ) \t');
fprintf(fid,'%.2f ', algo_fitting );
fprintf(fid,'\n');


if strcmp(model_bkp,'MonoExpo')
    fprintf(fid,'input lifetime: \t');
    fprintf(fid,'%.2f ', tau );
    fprintf(fid,'\n');
elseif strcmp(model_bkp,'DoubleExpo')
    fprintf(fid,'input lifetime1: \t');
    fprintf(fid,'%.2f ', tau1 );
    fprintf(fid,'\n');
    fprintf(fid,'input lifetime2: \t');
    fprintf(fid,'%.2f ', tau2 );
    fprintf(fid,'\n');
    fprintf(fid,'input proportion with short lifetime: \t');
    fprintf(fid,'%.2f ', prop );
    fprintf(fid,'\n');
elseif strcmp(model_bkp,'TripleExpo')
    fprintf(fid,'input lifetime1: \t');
    fprintf(fid,'%.2f ', tau1_ );
    fprintf(fid,'\n');
    fprintf(fid,'input lifetime2: \t');
    fprintf(fid,'%.2f ', tau2_ );
    fprintf(fid,'\n');
    fprintf(fid,'input lifetime3: \t');
    fprintf(fid,'%.2f ', tau3_ );
    fprintf(fid,'\n');
    fprintf(fid,'input proportion with very short lifetime: \t');
    fprintf(fid,'%.2f ', prop1_ );
    fprintf(fid,'\n');
    fprintf(fid,'input proportion with short lifetime: \t');
    fprintf(fid,'%.2f ', prop2_ );
    fprintf(fid,'\n');
elseif strcmp(model_bkp,'QuadroExpo')
    fprintf(fid,'input lifetime1: \t');
    fprintf(fid,'%.2f ', tau4_1 );
    fprintf(fid,'\n');
    fprintf(fid,'input lifetime2: \t');
    fprintf(fid,'%.2f ', tau4_2 );
    fprintf(fid,'\n');
    fprintf(fid,'input lifetime3: \t');
    fprintf(fid,'%.2f ', tau4_3 );
    fprintf(fid,'\n');
    fprintf(fid,'input lifetime4: \t');
    fprintf(fid,'%.2f ', tau4_4 );
    fprintf(fid,'\n');
    fprintf(fid,'input proportion with very short lifetime: \t');
    fprintf(fid,'%.2f ', prop4_1 );
    fprintf(fid,'\n');
    fprintf(fid,'input proportion with short lifetime: \t');
    fprintf(fid,'%.2f ', prop4_2 );
    fprintf(fid,'\n');
    fprintf(fid,'input proportion with mid-short lifetime: \t');
    fprintf(fid,'%.2f ', prop4_3 );
    fprintf(fid,'\n');
elseif strcmp(model_bkp,'MonoExpo_stretched')
    fprintf(fid,'input lifetime: \t');
    fprintf(fid,'%.2f ', tauS );
    fprintf(fid,'\n');
    fprintf(fid,'input power: \t');
    fprintf(fid,'%.2f ', powerS );
    fprintf(fid,'\n');
end
fprintf(fid,'\n');

fprintf(fid,'Match for best_model: \t');
fprintf(fid,'%.2f ', match_nb );
fprintf(fid,'\n');

if nb_bootstrap ~= 1
    if ~isempty(sample_tau)
        fprintf(fid,'Mono expo. \n');
        fprintf(fid,'measured lifetime: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round2(mean_tau,1e-2), ' +/- ', round2(std_tau,1e-2), 's' );
        fprintf(fid,'\n');
    end
    fprintf(fid,'\n');
    if ~isempty(sample_tau1)
        fprintf(fid,'Double expo. \n');
        fprintf(fid,'measured lifetime1: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round2(mean_tau1,1e-2), ' +/- ', round2(std_tau1,1e-2), 's');
        fprintf(fid,'\n');
        fprintf(fid,'measured lifetime2: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round2(mean_tau2,1e-2), ' +/- ', round2(std_tau2,1e-2), 's');
        fprintf(fid,'\n');
        fprintf(fid,'measured proportion with short lifetime: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round(mean_prop*100), ' +/- ', round(std_prop*100), '%' );
        fprintf(fid,'\n');
        fprintf(fid,'measured proportion with long lifetime: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round(100-mean_prop*100), ' +/- ', round(std_prop*100), '%' );
        fprintf(fid,'\n');
    end
    fprintf(fid,'\n');
    if ~isempty(sample_tau1_)
        fprintf(fid,'Triple expo. \n');
        fprintf(fid,'measured lifetime1: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round2(mean_tau1_,1e-2), ' +/- ', round2(std_tau1_,1e-2), 's' );
        fprintf(fid,'\n');
        fprintf(fid,'measured lifetime2: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round2(mean_tau2_,1e-2), ' +/- ', round2(std_tau2_,1e-2), 's' );
        fprintf(fid,'\n');
        fprintf(fid,'measured lifetime3: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round2(mean_tau3_,1e-2), ' +/- ', round2(std_tau3_,1e-2), 's' );
        fprintf(fid,'\n');
        fprintf(fid,'measured proportion with lifetime1: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round(mean_prop1_*100), ' +/- ', round(std_prop1_*100), '%' );
        fprintf(fid,'\n');
        fprintf(fid,'measured proportion with lifetime2: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round(mean_prop2_*100), ' +/- ', round(std_prop2_*100), '%'  );
        fprintf(fid,'\n');
        fprintf(fid,'measured proportion with lifetime3: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round(100-mean_prop2_*100-mean_prop1_*100), ' +/- ', round(std_prop2_*100), '%'  );
        fprintf(fid,'\n');
    end
    fprintf(fid,'\n');
    if ~isempty(sample_tau4_1)
        fprintf(fid,'Quadro expo. \n');
        fprintf(fid,'measured lifetime1: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round2(mean_tau4_1,1e-2), ' +/- ', round2(std_tau4_1,1e-2), 's' );
        fprintf(fid,'\n');
        fprintf(fid,'measured lifetime2: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round2(mean_tau4_2,1e-2), ' +/- ', round2(std_tau4_2,1e-2), 's' );
        fprintf(fid,'\n');
        fprintf(fid,'measured lifetime3: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round2(mean_tau4_3,1e-2), ' +/- ', round2(std_tau4_3,1e-2), 's' );
        fprintf(fid,'\n');
        fprintf(fid,'measured lifetime4: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round2(mean_tau4_4,1e-2), ' +/- ', round2(std_tau4_4,1e-2), 's' );
        fprintf(fid,'\n');
        fprintf(fid,'measured proportion with lifetime1: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round(mean_prop4_1*100), ' +/- ', round(std_prop4_1*100), '%' );
        fprintf(fid,'\n');
        fprintf(fid,'measured proportion with lifetime2: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round(mean_prop4_2*100), ' +/- ', round(std_prop4_2*100), '%'  );
        fprintf(fid,'\n');
        fprintf(fid,'measured proportion with lifetime3: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round(mean_prop4_3*100), ' +/- ', round(std_prop4_3*100), '%'  );
        fprintf(fid,'\n');
        fprintf(fid,'measured proportion with lifetime3: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round(100-mean_prop4_3*100-mean_prop4_2*100-mean_prop4_1*100), ' +/- ', round(std_prop4_3*100), '%'  );
        fprintf(fid,'\n');
    end
    if ~isempty(sample_tauS)
        fprintf(fid,'Mono expo stretched. \n');
        fprintf(fid,'measured lifetime: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round2(mean_tauS,1e-2), ' +/- ', round2(std_tauS,1e-2), 's' );
        fprintf(fid,'\n');
        fprintf(fid,'measured power: \t');
        fprintf(fid,'%.2f%s%.2f%s ', round2(mean_powerS,1e-2), ' +/- ', round2(std_powerS,1e-2) );
        fprintf(fid,'\n');        
    end
    fprintf(fid,'\n');      
end
fclose(fid);


%% clear

clear all
close all


end

