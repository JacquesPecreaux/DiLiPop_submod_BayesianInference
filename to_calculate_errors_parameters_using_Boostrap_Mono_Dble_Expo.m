function [ fitting_results ] = to_calculate_errors_parameters_using_Boostrap_Mono_Dble_Expo...
    ( input,models,fitting_results,original_best_model,timing_phase,blastomere,nbEmbryo_givenCondition,...
    tmin,fixed_short_lifetime,fixed_short_percent,save_stem,plot_visualization )

% to implement the computation of error through performing boostraping with replacement
% see courses from Loyed-Smith and "cours_mle_introduction"

% for each dataset generated by boostrapping, we perform the fit and get a
% set of parameters. This is repeat N times the size of the initial data
% set. The errors of the parameters are estimated from the standadr
% deviation
% on the optimized parameters.

if ~exist('plot_visualization','var')
    plot_visualization = 0;
end

global param


%% get mean size of sample to estimnate number of boostrap for later

size_population_raw = 0;

for iEmbryo = 1 : nbEmbryo_givenCondition
    
    name_embryo = ['embryo' num2str(iEmbryo)];
    size_population_raw =  size_population_raw + nansum( input.(name_embryo).data(:,2) );
    size_population.(name_embryo).raw = nansum( input.(name_embryo).data(:,2) );
    
end

size_population.total.raw = size_population_raw;
fitting_results.size_population = size_population;
size_population_mean = size_population_raw /nbEmbryo_givenCondition;


%% to estimate loop number

if size_population_mean < 4000
    loop_nb = size_population_mean;
elseif size_population_mean >= 4000
    loop_nb = 4000;
% else
%     loop_nb = size_population_mean;
end
fitting_results.bootstrap_number = loop_nb;


%% define and allocates variables

match_model = 0;

sample_tau = nan(1,round(loop_nb));
sample_tau1 = nan(1,round(loop_nb));
sample_tau2 = nan(1,round(loop_nb));
sample_prop = nan(1,round(loop_nb));
sample_d1 = nan(1,round(loop_nb));
sample_d2 = nan(1,round(loop_nb));
sample_f1 = nan(1,round(loop_nb));
sample_f2 = nan(1,round(loop_nb));


%% generate new data and fit their duration distribution to get a sample of model parameters

for iSample = 1 : round(loop_nb)
    
    for iEmbryo = 1 : nbEmbryo_givenCondition
        
        extension = ['embryo' num2str(iEmbryo)];
        
        tmax = max(input.(extension).raw_data)./param.sp6;
        
        new_binranges = [tmin : 0.1 : tmax].*param.sp6;
        new_sample = datasample( input.(extension).raw_data,length(input.(extension).raw_data) );
        [new_bincounts] = hist(new_sample, new_binranges);
        
        nb_zero = 0;
        index_zero = [];
        for i = 1 : length(new_bincounts)
            if new_bincounts(i) ==0
                nb_zero = nb_zero+1;
                index_zero = [[index_zero] i ];
            end
            if nb_zero == 10
                max_index = i;
                break
            end
        end
        if nb_zero < 10
            max_index = max(index_zero);
        end
        max_max_index = length(new_bincounts);
        index_to_remove2 = [(max_index):(max_max_index)];
        new_binranges(index_to_remove2) = [];
        new_bincounts(index_to_remove2) = [];
        
        nb_one = 0;
        index_one = [];
        for i = 1 : length(new_bincounts)
            if new_bincounts(i) ==1
                nb_one = nb_one+1;
                index_one = [[index_one] i ];
            end
            if nb_one == 3
                max_index_one = i;
                break
            end
        end
        if nb_one < 3
            max_index_one = max(index_one);
        end
        max_max_index_one = length(new_bincounts);
        bincounts_above_max_one = 0;
        for index = max_index_one+1 : max_max_index_one
            bincounts_above_max_one = bincounts_above_max_one + new_bincounts(index);
        end
        if max_max_index_one >= (max_index_one + 1)
            bincounts_above_max_one = bincounts_above_max_one / (max_max_index_one - max_index_one - 1);
            
            if ~isnan(bincounts_above_max_one)
                index_to_remove3 = [(max_index_one):(max_max_index_one)];
                new_binranges(index_to_remove3) = [];
                new_bincounts(index_to_remove3) = [];
                new_binranges(max_index_one) = max_index_one + ( max_max_index_one - max_index_one)/2;
                new_bincounts(max_index_one) = bincounts_above_max_one;
            end
        end
        
        % check for any inf in data
        [ ri] = find(~isfinite(new_bincounts));
        new_bincounts(ri)= [];
        new_binranges(ri)= [];
        index_to_remove_inf = find(isinf(new_bincounts));
        new_binranges(index_to_remove_inf) = [];
        new_bincounts(index_to_remove_inf) = [];
        
        new_data = [new_binranges(:)./param.sp6 new_bincounts(:)];
        new_binranges = new_binranges ./ param.sp6;
        new_input.(extension).data = new_data;
        new_input.(extension).duration_phase = input.(extension).duration_phase;
        new_input.(extension).area = input.(extension).area;
        
    end
    
    [ new_input,new_fitting_results] = to_calculate_parameters_using_fmincon_sum_mle...
        ( new_input,models,nbEmbryo_givenCondition,0,fixed_short_lifetime,fixed_short_percent );
    
    [ model_choice,best_model ] = to_find_best_model_sum_mle( new_input,new_fitting_results,nbEmbryo_givenCondition,models );
    if strcmp(original_best_model,best_model)
        match_model = match_model +1;
    end
    % to_plot_data_withBestFit_sum_mle_noError( new_input,new_fitting_results,best_model,nbEmbryo_givenCondition,'','',save_stem,2 );
    
    if strcmp(best_model,'MonoExpo')
        sample_best_model_mono(1,iSample) = 1;
        sample_best_model_double(1,iSample) = 0;
    elseif strcmp(best_model,'DoubleExpo')
        sample_best_model_mono(1,iSample) = 0;
        sample_best_model_double(1,iSample) = 1;
    else
        sample_best_model_mono(1,iSample) = 0;
        sample_best_model_double(1,iSample) = 0;        
    end
    
    sample_tau(1,iSample) = new_fitting_results.MonoExpo.T;
    sample_tau1(1,iSample) = new_fitting_results.DoubleExpo.T1;
    sample_tau2(1,iSample) = new_fitting_results.DoubleExpo.T2;
    sample_prop(1,iSample) = new_fitting_results.DoubleExpo.P1;
    sample_d1(1,iSample) = new_fitting_results.DoubleExpo.size_population_normalized_timeAndArea.mean1; 
    sample_d2(1,iSample) = new_fitting_results.DoubleExpo.size_population_normalized_timeAndArea.mean2;
    sample_f1(1,iSample) = new_fitting_results.DoubleExpo.size_population_normalized_time.mean1;
    sample_f2(1,iSample) = new_fitting_results.DoubleExpo.size_population_normalized_time.mean2;
    
    clear new_input new_fitting_results best_model model_choice
end


%%  selection of fitting values only when proper model is found as best model

T2_best =  sample_tau2(sample_best_model_double == 1 );
fitting_results.DoubleExpo.T2_mean_bootstrap_best = nanmean(T2_best);
fitting_results.DoubleExpo.T2_se_bootstrap_best = nanstd(T2_best);

T1_best =  sample_tau1(sample_best_model_double == 1 );
fitting_results.DoubleExpo.T1_mean_bootstrap_best =  nanmean(T1_best);
fitting_results.DoubleExpo.T1_se_bootstrap_best = nanstd(T1_best);

P1_best =  sample_prop(sample_best_model_double == 1 );
fitting_results.DoubleExpo.P1_mean_bootstrap_best = nanmean(P1_best);
fitting_results.DoubleExpo.P1_se_bootstrap_best = nanstd(P1_best);
fitting_results.DoubleExpo.P2_mean_bootstrap_best = 1 - nanmean(P1_best);
fitting_results.DoubleExpo.P2_se_bootstrap_best = nanstd(P1_best);

fitting_results.DoubleExpo.count_bootstrap_best = length(P1_best);

d1_best =  sample_d1(sample_best_model_double == 1 );
fitting_results.DoubleExpo.d1_mean_bootstrap_best = nanmean(d1_best);
fitting_results.DoubleExpo.d1_se_bootstrap_best = nanstd(d1_best);
d2_best =  sample_d2(sample_best_model_double == 1 );
fitting_results.DoubleExpo.d2_mean_bootstrap_best = nanmean(d2_best);
fitting_results.DoubleExpo.d2_se_bootstrap_best = nanstd(d2_best);

f1_best =  sample_f1(sample_best_model_double == 1 );
fitting_results.DoubleExpo.f1_mean_bootstrap_best = nanmean(f1_best);
fitting_results.DoubleExpo.f1_se_bootstrap_best = nanstd(f1_best);
f2_best =  sample_f2(sample_best_model_double == 1 );
fitting_results.DoubleExpo.f2_mean_bootstrap_best = nanmean(f2_best);
fitting_results.DoubleExpo.f2_se_bootstrap_best = nanstd(f2_best);


if sum(sample_best_model_mono) > 0
    T_best =  sample_tau(sample_best_model_mono == 1 );
    fitting_results.MonoExpo.T_mean_bootstrap_best = nanmean(T_best);
    fitting_results.MonoExpo.T_se_bootstrap_best = nanstd(T_best);
    fitting_results.MonoExpo.count_bootstrap_best = length(T_best);
    clear T_best
end

clear T2_best T1_best P1_best f1_best f2_best d1_best d2_best


%% selection of T2 values not too extreme because of bad fit (due to low count)

index_T2_results_bootstrap_sel = (sample_tau2 < 3 ); % consider only T2 values below 3 s

T2_new =  sample_tau2(index_T2_results_bootstrap_sel );
fitting_results.DoubleExpo.T2_mean_bootstrap_sel = nanmean(T2_new);
fitting_results.DoubleExpo.T2_se_bootstrap_sel = nanstd(T2_new);

T1_new =  sample_tau1(index_T2_results_bootstrap_sel );
fitting_results.DoubleExpo.T1_mean_bootstrap_sel =  nanmean(T1_new);
fitting_results.DoubleExpo.T1_se_bootstrap_sel = nanstd(T1_new);

P1_new =  sample_prop(index_T2_results_bootstrap_sel );
fitting_results.DoubleExpo.P1_mean_bootstrap_sel = nanmean(P1_new);
fitting_results.DoubleExpo.P1_se_bootstrap_sel = nanstd(P1_new);
fitting_results.DoubleExpo.P2_mean_bootstrap_sel = 1 - nanmean(P1_new);
fitting_results.DoubleExpo.P2_se_bootstrap_sel = nanstd(P1_new);

f2_new =  sample_f2(index_T2_results_bootstrap_sel );
fitting_results.DoubleExpo.f2_mean_bootstrap_sel = nanmean(f2_new);
fitting_results.DoubleExpo.f2_se_bootstrap_sel = nanstd(f2_new);

f1_new =  sample_f1(index_T2_results_bootstrap_sel );
fitting_results.DoubleExpo.f1_mean_bootstrap_sel =  nanmean(f1_new);
fitting_results.DoubleExpo.f1_se_bootstrap_sel = nanstd(f1_new);

d2_new =  sample_d2(index_T2_results_bootstrap_sel );
fitting_results.DoubleExpo.d2_mean_bootstrap_sel = nanmean(d2_new);
fitting_results.DoubleExpo.d2_se_bootstrap_sel = nanstd(d2_new);

d1_new =  sample_d1(index_T2_results_bootstrap_sel );
fitting_results.DoubleExpo.d1_mean_bootstrap_sel =  nanmean(d1_new);
fitting_results.DoubleExpo.d1_se_bootstrap_sel = nanstd(d1_new);

clear T2_new T1_new P1_new index_T2_results_bootstrap_sel f1_new f2_new d1_new d2_new


%% save results in fitting_results structure

fitting_results.match_model = match_model;

fitting_results.MonoExpo.T_se_bootstrap = nanstd(sample_tau);
fitting_results.MonoExpo.T_mean_bootstrap = nanmean(sample_tau);
fitting_results.MonoExpo.T_CI_bootstrap = prctile(sample_tau,[2.5 97.5]);
fitting_results.MonoExpo.T_results_bootstrap = sample_tau;


fitting_results.DoubleExpo.T1_se_bootstrap = nanstd(sample_tau1);
fitting_results.DoubleExpo.T2_se_bootstrap = nanstd(sample_tau2);
fitting_results.DoubleExpo.P1_se_bootstrap = nanstd(sample_prop);
fitting_results.DoubleExpo.P2_se_bootstrap = nanstd(sample_prop);
fitting_results.DoubleExpo.f1_se_bootstrap = nanstd(sample_f1);
fitting_results.DoubleExpo.f2_se_bootstrap = nanstd(sample_f2);
fitting_results.DoubleExpo.d1_se_bootstrap = nanstd(sample_d1);
fitting_results.DoubleExpo.d2_se_bootstrap = nanstd(sample_d2);

fitting_results.DoubleExpo.T1_mean_bootstrap = nanmean(sample_tau1);
fitting_results.DoubleExpo.T2_mean_bootstrap = nanmean(sample_tau2);
fitting_results.DoubleExpo.P1_mean_bootstrap = nanmean(sample_prop);
fitting_results.DoubleExpo.P2_mean_bootstrap = 1-nanmean(sample_prop);
fitting_results.DoubleExpo.f1_mean_bootstrap = nanmean(sample_f1);
fitting_results.DoubleExpo.f2_mean_bootstrap = nanmean(sample_f2);
fitting_results.DoubleExpo.d1_mean_bootstrap = nanmean(sample_d1);
fitting_results.DoubleExpo.d2_mean_bootstrap = nanmean(sample_d2);

fitting_results.DoubleExpo.T1_CI_bootstrap = prctile(sample_tau1,[2.5 97.5]);
fitting_results.DoubleExpo.T2_CI_bootstrap = prctile(sample_tau2,[2.5 97.5]);
fitting_results.DoubleExpo.P1_CI_bootstrap = prctile(sample_prop,[2.5 97.5]);
fitting_results.DoubleExpo.f1_CI_bootstrap = prctile(sample_f1,[2.5 97.5]);
fitting_results.DoubleExpo.f2_CI_bootstrap = prctile(sample_f2,[2.5 97.5]);
fitting_results.DoubleExpo.d1_CI_bootstrap = prctile(sample_d1,[2.5 97.5]);
fitting_results.DoubleExpo.d2_CI_bootstrap = prctile(sample_d2,[2.5 97.5]);

fitting_results.DoubleExpo.T1_results_bootstrap = sample_tau1;
fitting_results.DoubleExpo.T2_results_bootstrap = sample_tau2;
fitting_results.DoubleExpo.P1_results_bootstrap = sample_prop;
fitting_results.DoubleExpo.f1_results_bootstrap = sample_f1;
fitting_results.DoubleExpo.f2_results_bootstrap = sample_f2;
fitting_results.DoubleExpo.d1_results_bootstrap = sample_d1;  
fitting_results.DoubleExpo.d2_results_bootstrap = sample_d2; 


%% to visualize the results of boostrapping

if plot_visualization == 1
    if strcmp(original_best_model,'MonoExpo')
        
        figure
        hist(sample_tau, 20);
        xlabel('Duration (s)','FontSize',10);
        ylabel('Counts','FontSize',10);
        string = [ 'T: ', num2str(round2(mean(sample_tau),2e-2)), ' \pm ',  num2str(round2(std(sample_tau),2e-2)) ,' s'];
        text(25,250,string,'Units','pixels')
        namePlot = strcat('Histogram_ErrorsEstimate_T-MonoExpo',timing_phase,'-',blastomere,'.fig');
        saveas(gcf,[save_stem namePlot]);
        
    elseif strcmp(original_best_model,'DoubleExpo')
        
        figure
        hist(sample_tau1, 20);
        xlabel('Duration (s)','FontSize',10);
        ylabel('Counts','FontSize',10);
        string = [ 'T1: ', num2str(round2(mean(sample_tau1),2e-2)), ' \pm ',  num2str(round2(std(sample_tau1),2e-2)) ,' s'];
        text(25,250,string,'Units','pixels')
        namePlot = strcat('Histogram_ErrorsEstimate_T1-DoubleExpo',timing_phase,'-',blastomere,'.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        hist(sample_tau2, 20);
        xlabel('Duration (s)','FontSize',10);
        ylabel('Counts','FontSize',10);
        string = [ 'T2: ', num2str(round2(mean(sample_tau2),2e-2)), ' \pm ',  num2str(round2(std(sample_tau2),2e-2)) ,' s'];
        text(25,250,string,'Units','pixels')
        namePlot = strcat('Histogram_ErrorsEstimate_T2-DoubleExpo',timing_phase,'-',blastomere,'.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        hist(sample_prop, 20);
        xlabel('Duration (s)','FontSize',10);
        ylabel('Counts','FontSize',10);
        string = [ 'P1: ', num2str(round2(mean(sample_prop.*100),2e-1)), ' \pm ',  num2str(round2(std(sample_prop.*100),2e-1)) ,' %'];
        text(25,250,string,'Units','pixels')
        namePlot = strcat('Histogram_ErrorsEstimate_P1-DoubleExpo',timing_phase,'-',blastomere,'.fig');
        saveas(gcf,[save_stem namePlot]);
        
    elseif strcmp(original_best_model,'TripleExpo')
        
        figure
        hist(sample_tau1_, 20);
        xlabel('Duration (s)','FontSize',10);
        ylabel('Counts','FontSize',10);
        string = [ 'T1: ', num2str(round2(mean(sample_tau1_),2e-2)), ' \pm ',  num2str(round2(std(sample_tau1_),2e-2)) ,' s'];
        text(25,250,string,'Units','pixels')
        namePlot = strcat('Histogram_ErrorsEstimate_TT1-TripleExpo',timing_phase,'-',blastomere,'.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        hist(sample_tau2_, 20);
        xlabel('Duration (s)','FontSize',10);
        ylabel('Counts','FontSize',10);
        string = [ 'T2: ', num2str(round2(mean(sample_tau2_),2e-2)), ' \pm ',  num2str(round2(std(sample_tau2_),2e-2)) ,' s'];
        text(25,250,string,'Units','pixels')
        namePlot = strcat('Histogram_ErrorsEstimate_TT2-TripleExpo',timing_phase,'-',blastomere,'.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        hist(sample_tau3_, 20);
        xlabel('Duration (s)','FontSize',10);
        ylabel('Counts','FontSize',10);
        string = [ 'T3: ', num2str(round2(mean(sample_tau3_),2e-2)), ' \pm ',  num2str(round2(std(sample_tau3_),2e-2)) ,' s'];
        text(25,250,string,'Units','pixels')
        namePlot = strcat('Histogram_ErrorsEstimate_TT3-TripleExpo',timing_phase,'-',blastomere,'.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        hist(sample_prop1_, 20);
        xlabel('Duration (s)','FontSize',10);
        ylabel('Counts','FontSize',10);
        string = [ 'P1: ', num2str(round2(mean(sample_prop1_.*100),2e-1)), ' \pm ',  num2str(round2(std(sample_prop1_.*100),2e-1)) ,' %'];
        text(25,250,string,'Units','pixels')
        namePlot = strcat('Histogram_ErrorsEstimate_PP1_TripleExpo',timing_phase,'-',blastomere,'.fig');
        saveas(gcf,[save_stem namePlot]);
        
        figure
        hist(sample_prop2_, 20);
        xlabel('Duration (s)','FontSize',10);
        ylabel('Counts','FontSize',10);
        string = [ 'P2: ', num2str(round2(mean(sample_prop2_.*100),2e-1)), ' \pm ',  num2str(round2(std(sample_prop2_.*100),2e-1)) ,' %'];
        text(25,250,string,'Units','pixels')
        namePlot = strcat('Histogram_ErrorsEstimate_PP2_TripleExpo',timing_phase,'-',blastomere,'.fig');
        saveas(gcf,[save_stem namePlot]);
        
    elseif strcmp(original_best_model,'QuadroExpo')
        disp('plot not setup yet')
    end
end

end

